package com.kkl.kklplus.provider.rpt.service;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.google.common.collect.Lists;
import com.kkl.kklplus.entity.rpt.RPTExploitDetailEntity;
import com.kkl.kklplus.entity.rpt.search.RPTExploitDetailSearch;
import com.kkl.kklplus.entity.rpt.web.*;
import com.kkl.kklplus.provider.rpt.common.service.AreaCacheService;
import com.kkl.kklplus.provider.rpt.mapper.ExploitDetailRptMapper;
import com.kkl.kklplus.provider.rpt.ms.md.service.MSCustomerService;
import com.kkl.kklplus.provider.rpt.ms.md.utils.MDUtils;
import com.kkl.kklplus.provider.rpt.ms.sys.utils.MSAreaUtils;
import com.kkl.kklplus.provider.rpt.ms.sys.utils.MSDictUtils;
import com.kkl.kklplus.provider.rpt.utils.DateUtils;
import com.kkl.kklplus.provider.rpt.utils.Exceptions;
import com.kkl.kklplus.provider.rpt.utils.RptCommonUtils;
import com.kkl.kklplus.provider.rpt.utils.excel.ExportExcel;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.Arrays;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@Slf4j
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class ExploitDetailRptService extends RptBaseService {
    @Resource
    private ExploitDetailRptMapper exploitDetailRptMapper;

    @Autowired
    private MSCustomerService msCustomerService;

    @Autowired
    private AreaCacheService areaCacheService;

    public Page<RPTExploitDetailEntity> getExploitDetailRptData(RPTExploitDetailSearch search) {
        Page<RPTExploitDetailEntity> returnPage = new Page<>();
        if (search.getPageNo() != null && search.getPageSize() != null) {
            search.setSystemId(RptCommonUtils.getSystemId());
            PageHelper.startPage(search.getPageNo(), search.getPageSize());
            if (search.getCreateBeginDt() != null) {
                search.setCreateBeginDate(new Date(search.getCreateBeginDt()));
            }
            if (search.getCreateEndDt() != null) {
                search.setCreateEndDate(new Date(search.getCreateEndDt()));
            }
            search.setCloseBeginDate(new Date(search.getCloseBeginDt()));
            search.setCloseEndDate(new Date(search.getCloseEndDt()));
            returnPage = exploitDetailRptMapper.getExploitDetailList(search);
            Set<Long> customerIds = returnPage.stream().map(RPTExploitDetailEntity::getCustomerId).collect(Collectors.toSet());

            Map<Long, RPTProductCategory> allProductCategoryMap = MDUtils.getAllProductCategoryMap();
            Map<Long, RPTServiceType> serviceTypeMap = MDUtils.getAllServiceTypeMap();
            Map<Long, RPTArea> areaMap = areaCacheService.getAllCountyMap();
            Map<String, RPTDict> statusDictMap = MSDictUtils.getDictMap(RPTDict.DICT_TYPE_ORDER_STATUS);
            String[] fieldsArray = new String[]{"id", "name"};
            Map<Long, RPTCustomer> customerMap  = msCustomerService.getCustomerMapWithCustomizeFields(Lists.newArrayList(customerIds), Arrays.asList(fieldsArray));
            for (RPTExploitDetailEntity entity : returnPage) {
                entity.setCustomerName(customerMap.get(entity.getCustomerId()).getName());
                if (allProductCategoryMap != null) {
                    if (entity.getProductCategoryId() != 0) {   //服务品类可能为0  获取不到服务品类名称
                        entity.setProductCategoryName(allProductCategoryMap.get(entity.getProductCategoryId()).getName());
                    }
                }
                if (entity.getServiceType() != null) {
                    if (serviceTypeMap.get(entity.getServiceType().getId()) != null) {
                        entity.getServiceType().setName(serviceTypeMap.get(entity.getServiceType().getId()).getName());
                    }

                }
                //状态
                if (entity.getOrderStatus() != null) {
                    if (statusDictMap.get(entity.getOrderStatus().getValue()) != null) {
                        entity.getOrderStatus().setLabel(statusDictMap.get(entity.getOrderStatus().getValue()).getLabel());
                    }
                }
                if (entity.getAreaId() != null) {
                    if (areaMap.get(entity.getAreaId()) != null) {
                        entity.setAreaName(areaMap.get(entity.getAreaId()).getFullName());
                    }
                }

            }
        }
        return returnPage;
    }


    /**
     * 检查报表是否有数据存在
     */
    public boolean hasReportData(String searchConditionJson) {
        boolean result = true;
        RPTExploitDetailSearch searchCondition = redisGsonService.fromJson(searchConditionJson, RPTExploitDetailSearch.class);
        searchCondition.setSystemId(RptCommonUtils.getSystemId());
        if (searchCondition.getCloseBeginDt() != null && searchCondition.getCloseEndDt() != null) {
            if (searchCondition.getCreateBeginDt() != null) {
                searchCondition.setCreateBeginDate(new Date(searchCondition.getCreateBeginDt()));
            }
            if (searchCondition.getCreateEndDt() != null) {
                searchCondition.setCreateEndDate(new Date(searchCondition.getCreateEndDt()));
            }

            searchCondition.setCloseBeginDate(new Date(searchCondition.getCloseBeginDt()));
            searchCondition.setCloseEndDate(new Date(searchCondition.getCloseEndDt()));
            Integer rowCount = exploitDetailRptMapper.hasReportData(searchCondition);
            result = rowCount > 0;
        }
        return result;
    }


    public SXSSFWorkbook exploitDetailExport(String searchConditionJson, String reportTitle) {
        SXSSFWorkbook xBook = null;
        try {
            RPTExploitDetailSearch searchCondition = redisGsonService.fromJson(searchConditionJson, RPTExploitDetailSearch.class);
            if (searchCondition.getCreateBeginDt() != null) {
                searchCondition.setCreateBeginDate(new Date(searchCondition.getCreateBeginDt()));
            }
            if (searchCondition.getCreateEndDt() != null) {
                searchCondition.setCreateEndDate(new Date(searchCondition.getCreateEndDt()));
            }
            searchCondition.setCloseBeginDate(new Date(searchCondition.getCloseBeginDt()));
            searchCondition.setCloseEndDate(new Date(searchCondition.getCloseEndDt()));
            Page<RPTExploitDetailEntity> list = getExploitDetailRptData(searchCondition);
            ExportExcel exportExcel = new ExportExcel();
            xBook = new SXSSFWorkbook(5000);
            Sheet xSheet = xBook.createSheet(reportTitle);
            xSheet.setDefaultColumnWidth(EXECL_CELL_WIDTH_10);
            Map<String, CellStyle> xStyle = exportExcel.createStyles(xBook);
            int rowIndex = 0;


            //====================================================绘制标题行============================================================
            Row titleRow = xSheet.createRow(rowIndex++);
            titleRow.setHeightInPoints(EXECL_CELL_HEIGHT_TITLE);
            ExportExcel.createCell(titleRow, 0, xStyle, ExportExcel.CELL_STYLE_NAME_TITLE, reportTitle);
            xSheet.addMergedRegion(new CellRangeAddress(titleRow.getRowNum(), titleRow.getRowNum(), 0, 15));
            //表头第一行
            Row headerFirstRow = xSheet.createRow(rowIndex++);
            headerFirstRow.setHeightInPoints(EXECL_CELL_HEIGHT_HEADER);

            ExportExcel.createCell(headerFirstRow, 0, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "序号");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 0, 0));
            ExportExcel.createCell(headerFirstRow, 1, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "服务品类");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 1, 1));
            ExportExcel.createCell(headerFirstRow, 2, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "订单编号");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 2, 2));
            ExportExcel.createCell(headerFirstRow, 3, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "状态");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 3, 3));
            ExportExcel.createCell(headerFirstRow, 4, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "客服发单人");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 4, 4));
            ExportExcel.createCell(headerFirstRow, 5, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "发单时间");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 5, 5));
            ExportExcel.createCell(headerFirstRow, 6, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "突击单完结人");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 6, 6));
            ExportExcel.createCell(headerFirstRow, 7, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "完结时间");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 7, 7));
            ExportExcel.createCell(headerFirstRow, 8, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "服务类型");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 8, 8));
            ExportExcel.createCell(headerFirstRow, 9, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "客户");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 9, 9));
            ExportExcel.createCell(headerFirstRow, 10, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "用户名");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 10, 10));
            ExportExcel.createCell(headerFirstRow, 11, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "用户电话");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 11, 11));
            ExportExcel.createCell(headerFirstRow, 12, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "省市区");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 12, 12));
            ExportExcel.createCell(headerFirstRow, 13, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "地址");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum() + 1, 13, 13));
            ExportExcel.createCell(headerFirstRow, 14, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "加费用");
            xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum(), 14, 15));

            //表头第二行
            Row headerSecondRow = xSheet.createRow(rowIndex++);
            headerSecondRow.setHeightInPoints(EXECL_CELL_HEIGHT_HEADER);

            ExportExcel.createCell(headerSecondRow, 14, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "远程");
            ExportExcel.createCell(headerSecondRow, 15, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "其他");


            xSheet.createFreezePane(0, rowIndex); // 冻结单元格(x, y)


            //====================================================绘制表格数据单元格============================================================
            double engineerTravelCharge = 0.0;
            double engineerOtherCharge = 0.0;


            if (list != null) {
                for (int i = 0; i < list.size(); i++) {
                    RPTExploitDetailEntity entity = list.get(i);
                    Row dataRow = xSheet.createRow(rowIndex++);
                    dataRow.setHeightInPoints(EXECL_CELL_HEIGHT_DATA);
                    ExportExcel.createCell(dataRow, 0, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, i + 1);
                    ExportExcel.createCell(dataRow, 1, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getProductCategoryName() == null ? "" : entity.getProductCategoryName());
                    ExportExcel.createCell(dataRow, 2, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getOrderNo());
                    ExportExcel.createCell(dataRow, 3, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getOrderStatus() == null ? "" : entity.getOrderStatus().getLabel() == null ? "" : entity.getOrderStatus().getLabel());
                    ExportExcel.createCell(dataRow, 4, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getCreateName());
                    ExportExcel.createCell(dataRow, 5, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, DateUtils.formatDate(entity.getCreateDate(), "yyyy-MM-dd HH:mm:ss"));
                    ExportExcel.createCell(dataRow, 6, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getCloseName());
                    ExportExcel.createCell(dataRow, 7, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, DateUtils.formatDate(entity.getCloseDate(), "yyyy-MM-dd HH:mm:ss"));
                    ExportExcel.createCell(dataRow, 8, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getServiceType() == null ? "" : entity.getServiceType().getName() == null ? "" : entity.getServiceType().getName());
                    ExportExcel.createCell(dataRow, 9, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getCustomerName() == null ? "" : entity.getCustomerName());
                    ExportExcel.createCell(dataRow, 10, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getUserName() == null ? "" : entity.getUserName());
                    ExportExcel.createCell(dataRow, 11, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getUserPhone() == null ? "" : entity.getUserPhone());
                    ExportExcel.createCell(dataRow, 12, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getAreaName() == null ? "" : entity.getAreaName());
                    ExportExcel.createCell(dataRow, 13, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getUserAddress() == null ? "" : entity.getUserAddress());

                    ExportExcel.createCell(dataRow, 14, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getEngineerTravelCharge());
                    ExportExcel.createCell(dataRow, 15, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getEngineerOtherCharge());


                    engineerTravelCharge = engineerTravelCharge + entity.getEngineerTravelCharge();
                    engineerOtherCharge = engineerOtherCharge + entity.getEngineerOtherCharge();
                }
                Row dataRow = xSheet.createRow(rowIndex++);
                dataRow.setHeightInPoints(EXECL_CELL_HEIGHT_DATA);
                ExportExcel.createCell(dataRow, 0, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "合计");
                xSheet.addMergedRegion(new CellRangeAddress(dataRow.getRowNum(), dataRow.getRowNum(), 0, 13));


                ExportExcel.createCell(dataRow, 14, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, engineerTravelCharge);
                ExportExcel.createCell(dataRow, 15, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, engineerOtherCharge);

            }
        } catch (Exception e) {
            log.error("【ExploitDetailService.exploitDetailExport】开发明细报表写入excel失败, errorMsg: {}", Exceptions.getStackTraceAsString(e));
            return null;
        }

        return xBook;
    }
}
